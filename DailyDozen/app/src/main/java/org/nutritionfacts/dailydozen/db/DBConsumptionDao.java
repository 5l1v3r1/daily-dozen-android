package org.nutritionfacts.dailydozen.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import org.nutritionfacts.dailydozen.db.DBConsumption;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBCONSUMPTION.
*/
public class DBConsumptionDao extends AbstractDao<DBConsumption, Long> {

    public static final String TABLENAME = "DBCONSUMPTION";

    /**
     * Properties of entity DBConsumption.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConsumedServingCount = new Property(1, Double.class, "consumedServingCount", false, "CONSUMED_SERVING_COUNT");
        public final static Property FoodTypeIdentifier = new Property(2, String.class, "foodTypeIdentifier", false, "FOOD_TYPE_IDENTIFIER");
        public final static Property DailyReportId = new Property(3, Long.class, "dailyReportId", false, "DAILY_REPORT_ID");
    };

    private Query<DBConsumption> dBDailyReport_ConsumptionsQuery;

    public DBConsumptionDao(DaoConfig config) {
        super(config);
    }
    
    public DBConsumptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBCONSUMPTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONSUMED_SERVING_COUNT' REAL," + // 1: consumedServingCount
                "'FOOD_TYPE_IDENTIFIER' TEXT," + // 2: foodTypeIdentifier
                "'DAILY_REPORT_ID' INTEGER);"); // 3: dailyReportId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBCONSUMPTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBConsumption entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double consumedServingCount = entity.getConsumedServingCount();
        if (consumedServingCount != null) {
            stmt.bindDouble(2, consumedServingCount);
        }
 
        String foodTypeIdentifier = entity.getFoodTypeIdentifier();
        if (foodTypeIdentifier != null) {
            stmt.bindString(3, foodTypeIdentifier);
        }
 
        Long dailyReportId = entity.getDailyReportId();
        if (dailyReportId != null) {
            stmt.bindLong(4, dailyReportId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBConsumption readEntity(Cursor cursor, int offset) {
        DBConsumption entity = new DBConsumption( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // consumedServingCount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foodTypeIdentifier
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // dailyReportId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBConsumption entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConsumedServingCount(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setFoodTypeIdentifier(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDailyReportId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBConsumption entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBConsumption entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "consumptions" to-many relationship of DBDailyReport. */
    public List<DBConsumption> _queryDBDailyReport_Consumptions(Long dailyReportId) {
        synchronized (this) {
            if (dBDailyReport_ConsumptionsQuery == null) {
                QueryBuilder<DBConsumption> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DailyReportId.eq(null));
                dBDailyReport_ConsumptionsQuery = queryBuilder.build();
            }
        }
        Query<DBConsumption> query = dBDailyReport_ConsumptionsQuery.forCurrentThread();
        query.setParameter(0, dailyReportId);
        return query.list();
    }

}
